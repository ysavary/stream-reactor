import java.util.concurrent.CopyOnWriteArrayList

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.maiflai:gradle-scalatest:0.14'
        classpath 'net.researchgate:gradle-release:2.3.4'
        classpath "org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.8.2"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
    }
}



allprojects {
    group = 'com.datamountaineer'
    version =  version
    description = "stream-reactor"
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'com.github.maiflai.scalatest'
    apply plugin: 'net.researchgate.release'
    apply plugin: 'scalaStyle'
    apply plugin: 'com.github.johnrengelman.shadow'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        scalaMajorVersion = '2.11'
        scala = '2.11.7'
        scalaCheck = '1.11.1'
        scalaTest = '2.2.6'
        junit = '4.11'
        scalaLoggingVersion = '2.1.2'
        kafkaVersion = '0.10.0.0'
        mockitoVersion = '1.10.19'
        jacksonDatabind = '2.7.0'
        avroVersion = '1.7.7'
        jacksonxmlVersion = '2.6.5'
        slf4jVersion = "1.7.7"
        dataMountaineerCommonVersion = "0.3.7"
        dataMountaineerTestKitVersion = "0.2"
        avro4sVersion = "1.3.2"
        json4sVersion = "3.3.0"
        kiteMiniClusterVersion = "1.1.0"
        gsonVersion = "2.6.2"
        dataMountaineerCQLVersion = "0.8.3"
        confluentVersion = '3.0.0'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://packages.confluent.io/maven/" }
        maven { url "http://repo.typesafe.com/typesafe/releases/" }
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
        maven { url "http://conjars.org/repo" }
    }

    configurations {
        provided
        compile.extendsFrom provided
    }

    jar {
        dependsOn configurations.runtime
        from {
            (configurations.runtime - configurations.provided).collect {
                it.isDirectory() ? it : zipTree(it)
            }
        } {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
            include "*.conf"
        }

        zip64 true
        jar.archiveName = "${project.name}-${project.version}-${confluentVersion}-all.jar"
    }

    shadowJar {
        configurations = [project.configurations.runtime]
        baseName = "${project.name}-${project.version}-${confluentVersion}-aiko-2"
        classifier = null
        version = null

        zip64 true

        mergeServiceFiles{
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }

        transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
            resource = 'reference.conf'
        }
        dependencies{
            exclude(dependency("org.apache.avro:.*"))
            exclude(dependency("org.apache.kafka:.*"))
            exclude(dependency("io.confluent:.*"))
        }
    }

    dependencies {
        compile "org.scala-lang:scala-library:$scala"
        compile "org.scala-lang:scala-compiler:$scala"
        compile "com.typesafe.scala-logging:scala-logging-slf4j_$scalaMajorVersion:$scalaLoggingVersion"
        compile ("com.datamountaineer:kcql:$dataMountaineerCQLVersion") {
            exclude group: "com.google.guava", module: "guava"
        }

        provided "org.apache.kafka:connect-json:$kafkaVersion"
        provided "io.confluent:kafka-connect-avro-converter:$confluentVersion"
        provided "io.confluent:kafka-schema-registry:$confluentVersion"
        provided "org.apache.avro:avro:$avroVersion"

        testCompile "org.mockito:mockito-all:$mockitoVersion"
        testCompile "org.scalacheck:scalacheck_$scalaMajorVersion:$scalaCheck"
        testCompile "org.scalatest:scalatest_$scalaMajorVersion:$scalaTest"
        testCompile "junit:junit:$junit"

        testRuntime 'org.pegdown:pegdown:1.1.0'
    }

    test {
        maxParallelForks = 1
        minHeapSize '256m'
        maxHeapSize '2048m'
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task scaladocJar(type: Jar) {
        classifier = 'scaladoc'
        from '../LICENSE'
        from scaladoc
    }

    tasks.withType(Tar) {
        compression Compression.GZIP
        extension = 'tgz'
    }

    task compile(dependsOn: 'compileScala')

    task fatJar(dependsOn: [test, shadowJar])

    task collectJars(type: Copy){
        into "${buildDir}/libs-dependencies"
        from configurations.runtime
    }

    scalaStyle {
        configLocation = "${project.projectDir}/../style/scalastyle_config.xml"
        includeTestSourceDirectory = false
        source = "src/main/scala"
        testSource = "src/test/scala"
    }

    task collectBin(type: Copy) {
        delete "${project.rootDir}/release/${project.description}-${project.version}-${confluentVersion}/bin"
        from "${project.rootDir}/bin"
        into "${project.rootDir}/release/${project.description}-${project.version}-${confluentVersion}/bin"
    }

    task collectFatJar (type: Copy, dependsOn: shadowJar){
        delete "${project.rootDir}/release/${project.description}-${project.version}-${confluentVersion}/libs"
        from "${buildDir}/libs"
        into "${project.rootDir}/release/${project.description}-${project.version}-${confluentVersion}/libs"
    }

    task tar(type: Tar, dependsOn: [collectFatJar, collectBin]) {
        delete "${project.rootDir}/release/${project.description}-${project.version}-${confluentVersion}.tar.gz"
        from "${project.rootDir}/release/"
        exclude "**.gz"
        archiveName = "${project.description}-${project.version}-${confluentVersion}.tar.gz"
        destinationDir = file("${project.rootDir}/release")
        compression = Compression.GZIP
        delete "${project.rootDir}/release/${project.description}-${project.version}-${confluentVersion}"
    }
}
